1. format() methond를 활용한 문자열 포맷
ex)
- print('This is a string {}'.format('INSTERTED'))
result : This is a string INSERTED

- 문자열을 인덱스 위치마다 넣어줄 수 있는 장점이 있음
ex)
- print('The {} {} {}'.format('fox', 'brown', 'quick'))
result : The fox brown quick
- 그런데 위에 것을 가지고 Indexing을 통해 문자열의 순서를 바꿀 수 있는 장점이 있다.
ex)
- print('The {2} {1} {0}'.format('fox', 'brown', 'quick'))
result : The quick brown fox

- 또는 format() 내부에 변수할당을 통해서 문자열을 출력할 수 있다.
ex)
print('The {f} {f} {f}'.format(f='fox', b='brown', q='quick'))
result : The fox fox fox

2. Float Formatiing
- 부동소수점 숫자의 너비와 정밀도를 조정할 수 있는 기능
ex)
result = 100/777 (0.1287001287001287 답)
print("The result was {}".format(result))
result : The result was 0.1287001287001287
ex)
"{value:width.precision f}"
- value : 변수값
- width : 공백에 대한 너비
- precision : 소수점 어디까지
print("The result was {r:1.3f}".format(result))
result : 0.129

3. f-string
.format을 쓰지 않고 f-string을 써서 formatting을 하지 않고 문자열을 넣어줄 수 있음
ex)
name = "Jose"
print(f'Hello, his name is {name}')
result : Hello, his name is Jose